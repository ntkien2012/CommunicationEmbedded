class AES256:
    # AES S-box
    sbox = [
        0x43, 0xdf, 0xce, 0xd7, 0x96, 0x65, 0xaa, 0xd2,
        0xa9, 0x98, 0x4e, 0xfc, 0x80, 0xff, 0xcd, 0x49,
        0xbe, 0x7a, 0x84, 0xe6, 0x4b, 0x03, 0xf1, 0xc5,
        0x7d, 0xfb, 0x6e, 0xc8, 0xa3, 0xb6, 0x9e, 0x66,
        0x58, 0x77, 0x79, 0x1e, 0xb2, 0xc7, 0x23, 0x97,
        0xfe, 0xbd, 0x40, 0x25, 0xb8, 0xdd, 0x8d, 0xe8,
        0xf2, 0x87, 0x01, 0x19, 0x0d, 0x61, 0x6a, 0x72,
        0x9f, 0xc1, 0x0b, 0x99, 0xfd, 0x0e, 0xb1, 0xb5,
        0x13, 0x0f, 0xe7, 0x63, 0x74, 0xb0, 0x48, 0xc2,
        0x5e, 0x62, 0x27, 0x41, 0x50, 0x0c, 0xd6, 0x2a,
        0x28, 0x42, 0x3a, 0xd1, 0x24, 0x55, 0x71, 0x9b,
        0x15, 0xe9, 0xa5, 0xde, 0x85, 0x59, 0x5f, 0x46,
        0x8f, 0xef, 0x7e, 0xe1, 0xba, 0x5d, 0xb7, 0x17,
        0xb3, 0x47, 0x64, 0x88, 0xf9, 0x9d, 0x7c, 0xcf,
        0x31, 0x16, 0x5b, 0x8c, 0x8e, 0x32, 0xaf, 0x2e,
        0x08, 0xbf, 0x52, 0x2c, 0x8a, 0xa6, 0x86, 0x07,
        0xa1, 0x57, 0x26, 0x4c, 0x38, 0x2d, 0x70, 0xee,
        0xfa, 0x6d, 0x10, 0xd4, 0x51, 0xcb, 0x6f, 0x60,
        0xda, 0x29, 0xd8, 0xb9, 0x09, 0x35, 0xc0, 0xf5,
        0xac, 0xad, 0xe2, 0xc9, 0xa4, 0x1a, 0x04, 0x53,
        0x56, 0x3f, 0xf8, 0xe3, 0x90, 0x91, 0x2b, 0x33,
        0x9c, 0x7b, 0x00, 0xdb, 0x05, 0x1f, 0xea, 0x92,
        0xe4, 0x20, 0xab, 0x8b, 0x37, 0xf6, 0xf3, 0xf4,
        0x95, 0x4d, 0x1c, 0xec, 0x4f, 0x9a, 0x30, 0x3e,
        0x6c, 0x83, 0x76, 0x5a, 0x67, 0x75, 0xbb, 0xae,
        0x34, 0x45, 0x1b, 0x2f, 0x6b, 0x93, 0x22, 0x82,
        0x06, 0x3d, 0x3b, 0xca, 0x39, 0xe0, 0xf7, 0x94,
        0x18, 0x21, 0x69, 0x14, 0x4a, 0xed, 0xc3, 0xa0,
        0xc4, 0x12, 0xa2, 0xd5, 0xe5, 0x5c, 0xbc, 0x0a,
        0x89, 0x78, 0x44, 0x3c, 0xa7, 0x02, 0xdc, 0x81,
        0xf0, 0x1d, 0x54, 0x7f, 0xb4, 0xd3, 0xd0, 0x36,
        0x73, 0xcc, 0xd9, 0x68, 0xa8, 0xc6, 0xeb, 0x11,
    ]

    # AES inverse S-box
    rsbox = [
        0xaa, 0x32, 0xed, 0x15, 0x9e, 0xac, 0xd0, 0x7f,
        0x78, 0x94, 0xe7, 0x3a, 0x4d, 0x34, 0x3d, 0x41,
        0x8a, 0xff, 0xe1, 0x40, 0xdb, 0x58, 0x71, 0x67,
        0xd8, 0x33, 0x9d, 0xca, 0xba, 0xf1, 0x23, 0xad,
        0xb1, 0xd9, 0xce, 0x26, 0x54, 0x2b, 0x82, 0x4a,
        0x50, 0x91, 0x4f, 0xa6, 0x7b, 0x85, 0x77, 0xcb,
        0xbe, 0x70, 0x75, 0xa7, 0xc8, 0x95, 0xf7, 0xb4,
        0x84, 0xd4, 0x52, 0xd2, 0xeb, 0xd1, 0xbf, 0xa1,
        0x2a, 0x4b, 0x51, 0x00, 0xea, 0xc9, 0x5f, 0x69,
        0x46, 0x0f, 0xdc, 0x14, 0x83, 0xb9, 0x0a, 0xbc,
        0x4c, 0x8c, 0x7a, 0x9f, 0xf2, 0x55, 0xa0, 0x81,
        0x20, 0x5d, 0xc3, 0x72, 0xe5, 0x65, 0x48, 0x5e,
        0x8f, 0x35, 0x49, 0x43, 0x6a, 0x05, 0x1f, 0xc4,
        0xfb, 0xda, 0x36, 0xcc, 0xc0, 0x89, 0x1a, 0x8e,
        0x86, 0x56, 0x37, 0xf8, 0x44, 0xc5, 0xc2, 0x21,
        0xe9, 0x22, 0x11, 0xa9, 0x6e, 0x18, 0x62, 0xf3,
        0x0c, 0xef, 0xcf, 0xc1, 0x12, 0x5c, 0x7e, 0x31,
        0x6b, 0xe8, 0x7c, 0xb3, 0x73, 0x2e, 0x74, 0x60,
        0xa4, 0xa5, 0xaf, 0xcd, 0xd7, 0xb8, 0x04, 0x27,
        0x09, 0x3b, 0xbd, 0x57, 0xa8, 0x6d, 0x1e, 0x38,
        0xdf, 0x80, 0xe2, 0x1c, 0x9c, 0x5a, 0x7d, 0xec,
        0xfc, 0x08, 0x06, 0xb2, 0x98, 0x99, 0xc7, 0x76,
        0x45, 0x3e, 0x24, 0x68, 0xf4, 0x3f, 0x1d, 0x66,
        0x2c, 0x93, 0x64, 0xc6, 0xe6, 0x29, 0x10, 0x79,
        0x96, 0x39, 0x47, 0xde, 0xe0, 0x17, 0xfd, 0x25,
        0x1b, 0x9b, 0xd3, 0x8d, 0xf9, 0x0e, 0x02, 0x6f,
        0xf6, 0x53, 0x07, 0xf5, 0x8b, 0xe3, 0x4e, 0x03,
        0x92, 0xfa, 0x90, 0xab, 0xee, 0x2d, 0x5b, 0x01,
        0xd5, 0x63, 0x9a, 0xa3, 0xb0, 0xe4, 0x13, 0x42,
        0x2f, 0x59, 0xae, 0xfe, 0xbb, 0xdd, 0x87, 0x61,
        0xf0, 0x16, 0x30, 0xb6, 0xb7, 0x97, 0xb5, 0xd6,
        0xa2, 0x6c, 0x88, 0x19, 0x0b, 0x3c, 0x28, 0x0d,
    ]

    # Rcon
    rcon = [0xbe, 0x03, 0x2f, 0xda, 0x8c, 0xe2, 0xef, 0xc2, 0x5a, 0x66]

    def __init__(self, key):
        """
        Khởi tạo với key 256-bit (danh sách 32 số nguyên 0<=x<256)
        """
        if len(key) != 32:
            raise ValueError("Key phải có 32 byte cho AES-256")
        self.round_keys = self.key_expansion(key)

    def key_expansion(self, key):
        Nk = 8   # số từ 32-bit trong key (256 bits = 8 * 4 bytes)
        Nb = 4   # số từ trong khối (128 bits = 4 * 4 bytes)
        Nr = 14  # số vòng lặp cho AES-256

        # khởi tạo round_keys với key ban đầu
        round_keys = list(key)  # danh sách các byte
        # tổng số từ cần tạo: Nb*(Nr+1) = 4*(14+1)=60
        for i in range(Nk, Nb * (Nr + 1)):
            # lấy 4 byte của từ trước đó
            temp = round_keys[(i - 1) * 4 : (i - 1) * 4 + 4]
            if i % Nk == 0:
                temp = self.rot_word(temp)
                temp = [self.sbox[b] for b in temp]
                temp[0] ^= self.rcon[(i // Nk) - 1]
            elif Nk > 6 and (i % Nk) == 4:
                temp = [self.sbox[b] for b in temp]
            # tạo từ mới bằng cách XOR với từ cách đó Nk vị trí
            for j in range(4):
                new_byte = round_keys[(i - Nk) * 4 + j] ^ temp[j]
                round_keys.append(new_byte)
        return round_keys

    def rot_word(self, word):
        """Xoay vòng 4-byte sang trái 1 byte"""
        return word[1:] + word[:1]

    def add_round_key(self, state, key):
        for i in range(16):
            state[i] ^= key[i]

    def sub_bytes(self, state):
        for i in range(16):
            state[i] = self.sbox[state[i]]

    def inv_sub_bytes(self, state):
        for i in range(16):
            state[i] = self.rsbox[state[i]]

    def shift_rows(self, state):
        # state được biểu diễn dưới dạng danh sách 16 phần tử theo thứ tự cột:
        # hàng 0: indices 0, 4, 8, 12
        # hàng 1: indices 1, 5, 9, 13
        # hàng 2: indices 2, 6, 10, 14
        # hàng 3: indices 3, 7, 11, 15

        # Hàng 1: dịch trái 1
        state[1], state[5], state[9], state[13] = state[5], state[9], state[13], state[1]

        # Hàng 2: dịch trái 2 (hoán đổi 2 cặp)
        state[2], state[6], state[10], state[14] = state[10], state[14], state[2], state[6]

        # Hàng 3: dịch trái 3 (tương đương dịch phải 1)
        state[3], state[7], state[11], state[15] = state[15], state[3], state[7], state[11]

    def inv_shift_rows(self, state):
        # Hàng 1: dịch phải 1
        state[1], state[5], state[9], state[13] = state[13], state[1], state[5], state[9]

        # Hàng 2: dịch phải 2 (hoán đổi lại)
        state[2], state[6], state[10], state[14] = state[10], state[14], state[2], state[6]

        # Hàng 3: dịch phải 1
        state[3], state[7], state[11], state[15] = state[7], state[11], state[15], state[3]

    def gmul(self, a, b):
        """Nhân trong Galois Field GF(2^8) với đa thức không giảm 0x1b"""
        p = 0
        for _ in range(8):
            if b & 1:
                p ^= a
            hi_bit_set = a & 0x80
            a = (a << 1) & 0xFF
            if hi_bit_set:
                a ^= 0x1b
            b >>= 1
        return p

    def mix_columns(self, state):
        for i in range(4):
            col = state[i * 4 : (i + 1) * 4]
            state[i * 4 + 0] = self.gmul(col[0], 2) ^ self.gmul(col[1], 3) ^ col[2] ^ col[3]
            state[i * 4 + 1] = col[0] ^ self.gmul(col[1], 2) ^ self.gmul(col[2], 3) ^ col[3]
            state[i * 4 + 2] = col[0] ^ col[1] ^ self.gmul(col[2], 2) ^ self.gmul(col[3], 3)
            state[i * 4 + 3] = self.gmul(col[0], 3) ^ col[1] ^ col[2] ^ self.gmul(col[3], 2)

    def inv_mix_columns(self, state):
        for i in range(4):
            col = state[i * 4 : (i + 1) * 4]
            state[i * 4 + 0] = self.gmul(col[0], 0x0e) ^ self.gmul(col[1], 0x0b) ^ self.gmul(col[2], 0x0d) ^ self.gmul(col[3], 0x09)
            state[i * 4 + 1] = self.gmul(col[0], 0x09) ^ self.gmul(col[1], 0x0e) ^ self.gmul(col[2], 0x0b) ^ self.gmul(col[3], 0x0d)
            state[i * 4 + 2] = self.gmul(col[0], 0x0d) ^ self.gmul(col[1], 0x09) ^ self.gmul(col[2], 0x0e) ^ self.gmul(col[3], 0x0b)
            state[i * 4 + 3] = self.gmul(col[0], 0x0b) ^ self.gmul(col[1], 0x0d) ^ self.gmul(col[2], 0x09) ^ self.gmul(col[3], 0x0e)

    def encrypt(self, plaintext):
        """
        Mã hoá một khối 128-bit (plaintext là danh sách 16 số nguyên 0<=x<256)
        Trả về danh sách 16 số nguyên là ciphertext.
        """
        if len(plaintext) != 16:
            raise ValueError("Plaintext phải có 16 byte")
        state = list(plaintext)
        Nr = 14

        # Tách round_keys thành các khối 16 byte, tổng cộng (Nr+1)=15 khóa
        round_keys_splitted = [self.round_keys[i * 16:(i + 1) * 16] for i in range(Nr + 1)]

        # Vòng khởi tạo: AddRoundKey
        self.add_round_key(state, round_keys_splitted[0])

        # 13 vòng lặp (Nr - 1 vòng)
        for round in range(1, Nr):
            self.sub_bytes(state)
            self.shift_rows(state)
            self.mix_columns(state)
            self.add_round_key(state, round_keys_splitted[round])

        # Vòng cuối: không MixColumns
        self.sub_bytes(state)
        self.shift_rows(state)
        self.add_round_key(state, round_keys_splitted[Nr])

        return state

    def decrypt(self, ciphertext):
        """
        Giải mã một khối 128-bit (ciphertext là danh sách 16 số nguyên)
        Trả về danh sách 16 số nguyên là plaintext.
        """
        if len(ciphertext) != 16:
            raise ValueError("Ciphertext phải có 16 byte")
        state = list(ciphertext)
        Nr = 14

        round_keys_splitted = [self.round_keys[i * 16:(i + 1) * 16] for i in range(Nr + 1)]

        # Vòng khởi tạo: AddRoundKey với khóa cuối
        self.add_round_key(state, round_keys_splitted[Nr])

        # 13 vòng lặp: InvShiftRows, InvSubBytes, AddRoundKey, InvMixColumns
        for round in range(Nr - 1, 0, -1):
            self.inv_shift_rows(state)
            self.inv_sub_bytes(state)
            self.add_round_key(state, round_keys_splitted[round])
            self.inv_mix_columns(state)

        # Vòng cuối: không có InvMixColumns
        self.inv_shift_rows(state)
        self.inv_sub_bytes(state)
        self.add_round_key(state, round_keys_splitted[0])

        return state